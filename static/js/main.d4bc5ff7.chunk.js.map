{"version":3,"sources":["helpers/helpers.js","components/Dashboard.js","navigation/Main.js","navigation/Content.js","App.js","index.js"],"names":["fetchDataAtFixedInterval","viz","interval","arguments","length","undefined","setInterval","refreshDataAsync","intervalInSeconds","Date","getSeconds","date","now","dateFormatted","toLocaleTimeString","console","log","concat","resizeViz","width","height","setFrameSize","tableau","window","Dashboard","_useState","useState","url","Object","slicedToArray","ref","useRef","handleResize","innerWidth","innerHeight","options","hideTabs","hideToolbar","onFirstInteractive","useEffect","Viz","current","addEventListener","react_default","a","createElement","Main","components_Dashboard","Header","navigation_Main","App","Content","ReactDOM","render","src_App","document","getElementById"],"mappings":"4NAAaA,EAA2B,SAACC,GAAyB,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,IACvDG,YAAY,WACVL,EAAIM,mBAEJ,IAAMC,EAAoB,IAAIC,KAAKP,GAAUQ,aACvCC,EAAOF,KAAKG,MACZC,EAAgB,IAAIJ,KAAKE,GAAMG,qBAErCC,QAAQC,IAAR,aAAAC,OAAyBT,EAAzB,uBAAAS,OAAgEJ,KAC/DX,IAGQgB,EAAY,SAACjB,EAAKkB,EAAOC,GACpCL,QAAQC,IAAR,mBAAAC,OAA+BE,EAA/B,aAAAF,OAAgDG,IAChDnB,EAAIoB,aAAaF,EAAOC,ICXlBE,EAAYC,OAAZD,QAqCOE,MAnCf,WAAqB,IAOfvB,EAPewB,EACLC,mBACZ,8GADKC,EADYC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAKbK,EAAMC,iBAAO,MAIbC,EAAe,WACnBd,EAAUjB,EAAKsB,OAAOU,WAAYV,OAAOW,cAGrCC,EAAU,CACdC,UAAU,EACVC,aAAa,EACbC,mBAAoB,kBAAMN,MAc5B,OANAO,oBALgB,WACdtC,EAAM,IAAIqB,EAAQkB,IAAIV,EAAIW,QAASd,EAAKQ,GACxCnC,EAAyBC,IAGR,IAEnBsC,oBAAU,WACRhB,OAAOmB,iBAAiB,SAAUV,KAIlCW,EAAAC,EAAAC,cAAA,OAAKf,IAAKA,KC3BCgB,MANf,WACE,OACEH,EAAAC,EAAAC,cAACE,EAAD,OCIWC,MANf,WACE,OACEL,EAAAC,EAAAC,cAACI,EAAD,aCGWC,MAJf,WACE,OAAOP,EAAAC,EAAAC,cAACM,EAAD,OCATC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d4bc5ff7.chunk.js","sourcesContent":["export const fetchDataAtFixedInterval = (viz, interval = 5000) => {\n  setInterval(() => {\n    viz.refreshDataAsync();\n\n    const intervalInSeconds = new Date(interval).getSeconds();\n    const date = Date.now();\n    const dateFormatted = new Date(date).toLocaleTimeString();\n\n    console.log(`Refresh - ${intervalInSeconds} second interval - ${dateFormatted}`);\n  }, interval);\n};\n\nexport const resizeViz = (viz, width, height) => {\n  console.log(`Resize - width: ${width} height: ${height}`);\n  viz.setFrameSize(width, height);\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { fetchDataAtFixedInterval, resizeViz } from \"../helpers/helpers\";\n\nconst { tableau } = window;\n\nfunction Dashboard() {\n  const [url] = useState(\n    \"https://prod-apnortheast-a.online.tableau.com/t/cryptoviz2/views/CryptoDashboard_16506354371410/Dashboard3\" // Overview\n    // \"https://prod-apnortheast-a.online.tableau.com/t/cryptoviz2/views/CryptoDashboard_16506354371410/Dashboard4\" // Tweets\n  );\n  const ref = useRef(null);\n\n  let viz;\n\n  const handleResize = () => {\n    resizeViz(viz, window.innerWidth, window.innerHeight);\n  };\n\n  const options = {\n    hideTabs: true,\n    hideToolbar: true,\n    onFirstInteractive: () => handleResize(),\n  };\n\n  const initViz = () => {\n    viz = new tableau.Viz(ref.current, url, options);\n    fetchDataAtFixedInterval(viz);\n  };\n\n  useEffect(initViz, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n  });\n\n  return (\n    <div ref={ref}></div>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"../components/Dashboard\";\n\nfunction Main() {\n  return (\n    <Dashboard />\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./Main\";\n\nfunction Header() {\n  return (\n    <Main />\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Content from \"./navigation/Content\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Content />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}